diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/PTYSession.m iTerm2-patched/sources/PTYSession.m
*** iTerm2/sources/PTYSession.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/PTYSession.m	2018-05-22 17:46:55.000000000 +1000
***************
*** 3586,3592 ****
          if (baseIsBookmarkName && ![iTermPreferences boolForKey:kPreferenceKeyShowProfileName]) {
              return [NSString stringWithFormat:@"%@", self.jobName];
          } else {
!             return [NSString stringWithFormat:@"%@ (%@)", base, self.jobName];
          }
      } else {
          if (baseIsBookmarkName && ![iTermPreferences boolForKey:kPreferenceKeyShowProfileName]) {
--- 3586,3592 ----
          if (baseIsBookmarkName && ![iTermPreferences boolForKey:kPreferenceKeyShowProfileName]) {
              return [NSString stringWithFormat:@"%@", self.jobName];
          } else {
!             return [NSString stringWithFormat:@"%@", base]; // PATCH: (Modified) don't show job name if title was set
          }
      } else {
          if (baseIsBookmarkName && ![iTermPreferences boolForKey:kPreferenceKeyShowProfileName]) {
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/PseudoTerminal.m iTerm2-patched/sources/PseudoTerminal.m
*** iTerm2/sources/PseudoTerminal.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/PseudoTerminal.m	2018-05-22 16:26:08.000000000 +1000
***************
*** 388,393 ****
--- 388,394 ----
      if (hotkeyWindowType == iTermHotkeyWindowTypeFloatingPanel) {
          mask = NSNonactivatingPanelMask;
      }
+     //mask = NSFullSizeContentViewWindowMask; // PATCH: (Added) Make content view utilise entire window
      switch (windowType) {
          case WINDOW_TYPE_TOP:
          case WINDOW_TYPE_BOTTOM:
***************
*** 639,645 ****
          [myWindow setFrame:initialFrame display:NO];
      }
  
!     [myWindow setHasShadow:(windowType == WINDOW_TYPE_NORMAL)];
  
      DLog(@"Create window %@", myWindow);
  
--- 640,649 ----
          [myWindow setFrame:initialFrame display:NO];
      }
  
!     [myWindow setHasShadow:YES]; // PATCH: (Modified) Native macOS window shadow
!     
!     myWindow.titlebarAppearsTransparent = true; // PATCH: (Added) Hides dark title bar strip
!     //myWindow.titleVisibility = NSWindowTitleHidden; // PATCH: (Added) Hides window title
  
      DLog(@"Create window %@", myWindow);
  
***************
*** 1663,1676 ****
          if (self.window.frame.size.width < 250) {
              aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
          } else {
!             aTitle = [NSString stringWithFormat:@"%@ \u2014 %d✕%d",
!                       [self currentSessionName],
                        [session columns],
                        [session rows]];
          }
          [self setWindowTitle:aTitle];
      } else {
!         [self setWindowTitle:[self currentSessionName]];
      }
  }
  
--- 1667,1685 ----
          if (self.window.frame.size.width < 250) {
              aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
          } else {
!             // PATCH (Modified) just change to dimensions while resizing
!             aTitle = [NSString stringWithFormat:@"%d✕%d",
                        [session columns],
                        [session rows]];
          }
+         
          [self setWindowTitle:aTitle];
      } else {
!         // PATCH: (Added) Change title format
!         NSString *aTitle;
!         aTitle = [NSString stringWithFormat:@"Terminal \u2013 %@",
!                   [self currentSessionName]];
!         [self setWindowTitle:aTitle];
      }
  }
  
***************
*** 4432,4438 ****
      PTYTab *aTab = [tabViewItem identifier];
      PseudoTerminal *term = (PseudoTerminal *)[aTabBarControl delegate];
  
!     if ([term numberOfTabs] == 1) {
          [term fitWindowToTabs];
      } else {
          [term fitTabToWindow:aTab];
--- 4441,4447 ----
      PTYTab *aTab = [tabViewItem identifier];
      PseudoTerminal *term = (PseudoTerminal *)[aTabBarControl delegate];
  
!     if (true) { // PATCH: (Modified) Prevents title bar from showing
          [term fitWindowToTabs];
      } else {
          [term fitTabToWindow:aTab];
***************
*** 4936,4944 ****
          [_contentView.tabBarControl setTabColor:color forTabViewItem:tabViewItem];
          if ([_contentView.tabView selectedTabViewItem] == tabViewItem) {
              NSColor* newTabColor = [_contentView.tabBarControl tabColorForTabViewItem:tabViewItem];
!             if ([_contentView.tabView numberOfTabViewItems] == 1 &&
!                 [iTermPreferences boolForKey:kPreferenceKeyHideTabBar] &&
!                 newTabColor) {
                  [self setBackgroundColor:newTabColor];
  
                  [_contentView setColor:newTabColor];
--- 4945,4954 ----
          [_contentView.tabBarControl setTabColor:color forTabViewItem:tabViewItem];
          if ([_contentView.tabView selectedTabViewItem] == tabViewItem) {
              NSColor* newTabColor = [_contentView.tabBarControl tabColorForTabViewItem:tabViewItem];
!             if (true) { // PATCH: (Modified) always use the tab color
!                 // PATCH: (Added) set window title background so it renders properly
!                 NSTextView *titleView = [self.contentView.window standardWindowButton:NSWindowCloseButton].superview.subviews[3];
!                 titleView.backgroundColor = [self.tabs[0].sessions[0].colorMap colorForKey:kColorMapBackground];
                  [self setBackgroundColor:newTabColor];
  
                  [_contentView setColor:newTabColor];
***************
*** 4963,4968 ****
--- 4973,4982 ----
                  break;
          }
      }
+     
+     // PATCH: (Added) set window background color to terminal background color
+     backgroundColor = [self.tabs[0].sessions[0].colorMap colorForKey:kColorMapBackground];
+     
      [self.window setBackgroundColor:backgroundColor];
      if (backgroundColor != nil && backgroundColor.perceivedBrightness < 0.5) {
          self.window.appearance = [NSAppearance appearanceNamed:NSAppearanceNameVibrantDark];
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/iTermAdvancedSettingsModel.h iTerm2-patched/sources/iTermAdvancedSettingsModel.h
*** iTerm2/sources/iTermAdvancedSettingsModel.h	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/iTermAdvancedSettingsModel.h	2018-05-20 22:56:51.000000000 +1000
***************
*** 23,28 ****
--- 23,30 ----
  + (NSString *)searchCommand;
  + (BOOL)dockIconTogglesWindow DEPRECATED_ATTRIBUTE;
  + (double)timeBetweenBlinks;
+ + (double)timeBeforeBlinks; // PATCH: (Added) Duration before cursor blinking starts
+ + (BOOL)setCursorForegroundColor; // PATCH: (Added) Set cursor foreground color
  + (BOOL)neverWarnAboutMeta;
  + (BOOL)neverWarnAboutOverrides;
  + (BOOL)neverWarnAboutPossibleOverrides;
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/iTermAdvancedSettingsModel.m iTerm2-patched/sources/iTermAdvancedSettingsModel.m
*** iTerm2/sources/iTermAdvancedSettingsModel.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/iTermAdvancedSettingsModel.m	2018-05-20 22:56:51.000000000 +1000
***************
*** 133,138 ****
--- 133,142 ----
  #pragma mark Terminal
  DEFINE_BOOL(traditionalVisualBell, NO, @"Terminal: Visual bell flashes the whole screen, not just a bell icon.");
  DEFINE_FLOAT(timeBetweenBlinks, 0.5, @"Terminal: Cursor blink speed (seconds).");
+ // PATCH: (Added) Duration before cursor blinking starts
+ DEFINE_FLOAT(timeBeforeBlinks, 0.5, @"Terminal: Duration before cursor starts blinking.");
+ // PATCH: (Added) Set cursor foreground color
+ DEFINE_BOOL(setCursorForegroundColor, YES, @"Terminal: Set cursor foreground color.");
  DEFINE_BOOL(doNotSetCtype, NO, @"Terminal: Never set the CTYPE environment variable.");
  // For these, 1 is more aggressive and 0 turns the feature off:
  DEFINE_FLOAT(smartCursorColorBgThreshold, 0.5, @"Terminal: Threshold for Smart Cursor Color for background color (0 to 1).\n0 means the cursor’s background color will always be the cell’s text color, while 1 means it will always be black or white.");
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/iTermCursor.m iTerm2-patched/sources/iTermCursor.m
*** iTerm2/sources/iTermCursor.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/iTermCursor.m	2018-05-20 22:56:51.000000000 +1000
***************
*** 209,217 ****
                                       coord:coord];
          } else {
              // Non-smart
              [self.delegate cursorDrawCharacterAt:coord
                                       doubleWidth:doubleWidth
!                                    overrideColor:foregroundColor
                                           context:ctx
                                   backgroundColor:backgroundColor];
          }
--- 209,218 ----
                                       coord:coord];
          } else {
              // Non-smart
+             // PATCH: (Modified) Set cursor foreground color
              [self.delegate cursorDrawCharacterAt:coord
                                       doubleWidth:doubleWidth
!                                    overrideColor:[iTermAdvancedSettingsModel setCursorForegroundColor] == YES ? foregroundColor : nil
                                           context:ctx
                                   backgroundColor:backgroundColor];
          }
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/iTermRootTerminalView.m iTerm2-patched/sources/iTermRootTerminalView.m
*** iTerm2/sources/iTermRootTerminalView.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/iTermRootTerminalView.m	2018-05-22 00:15:56.000000000 +1000
***************
*** 16,22 ****
  #import "iTermToolbeltView.h"
  #import "PTYTabView.h"
  
! const CGFloat kHorizontalTabBarHeight = 24;
  const CGFloat kDivisionViewHeight = 1;
  
  static const CGFloat kMinimumToolbeltSizeInPoints = 100;
--- 16,22 ----
  #import "iTermToolbeltView.h"
  #import "PTYTabView.h"
  
! const CGFloat kHorizontalTabBarHeight = 0; // PATCH: (Modified) No tab bar
  const CGFloat kDivisionViewHeight = 1;
  
  static const CGFloat kMinimumToolbeltSizeInPoints = 100;
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/iTermTextDrawingHelper.m iTerm2-patched/sources/iTermTextDrawingHelper.m
*** iTerm2/sources/iTermTextDrawingHelper.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/iTermTextDrawingHelper.m	2018-05-20 22:56:51.000000000 +1000
***************
*** 2572,2581 ****
  }
  
  - (BOOL)shouldShowCursor {
      if (_cursorBlinking &&
          self.isInKeyWindow &&
          _textViewIsActiveSession &&
!         [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > 0.5) {
          // Allow the cursor to blink if it is configured, the window is key, this session is active
          // in the tab, and the cursor has not moved for half a second.
          return _blinkingItemsVisible;
--- 2572,2582 ----
  }
  
  - (BOOL)shouldShowCursor {
+     // PATCH: (Modified) Blink delay after moving the cursor
      if (_cursorBlinking &&
          self.isInKeyWindow &&
          _textViewIsActiveSession &&
!         [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > [iTermAdvancedSettingsModel timeBeforeBlinks]) {
          // Allow the cursor to blink if it is configured, the window is key, this session is active
          // in the tab, and the cursor has not moved for half a second.
          return _blinkingItemsVisible;
diff --exclude=.git -x '*.orig' -x '*.rej' -Prc iTerm2/sources/iTermWindowImpl.m iTerm2-patched/sources/iTermWindowImpl.m
*** iTerm2/sources/iTermWindowImpl.m	2018-05-20 23:04:57.000000000 +1000
--- iTerm2-patched/sources/iTermWindowImpl.m	2018-05-22 00:15:56.000000000 +1000
***************
*** 26,31 ****
--- 26,33 ----
      double _cachedTotalOcclusion;
  
      NSTimeInterval _timeOfLastWindowTitleChange;
+     
+     NSTextView *titleView;
  }
  
  - (instancetype)initWithContentRect:(NSRect)contentRect
***************
*** 42,47 ****
--- 44,50 ----
          DLog(@"Invalidate cached occlusion: %@ %p", NSStringFromSelector(_cmd), self);
          [[iTermWindowOcclusionChangeMonitor sharedInstance] invalidateCachedOcclusion];
      }
+ 
      return self;
  }
  
***************
*** 55,67 ****
  
  }
  
  - (BOOL)titleChangedRecently {
      NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
      return (now > _timeOfLastWindowTitleChange && now - _timeOfLastWindowTitleChange < iTermWindowTitleChangeMinimumInterval);
  }
  
  - (void)setTitle:(NSString *)title {
!     [super setTitle:title];
      _timeOfLastWindowTitleChange = [NSDate timeIntervalSinceReferenceDate];
  }
  
--- 58,99 ----
  
  }
  
+ // PATCH: (Added) Modify standard title bar
+ - (void)layoutIfNeeded {
+     NSButton *closeButton = [self.contentView.window standardWindowButton:NSWindowCloseButton];
+     NSButton *miniaturizeButton = [self.contentView.window standardWindowButton:NSWindowMiniaturizeButton];
+     NSButton *fullscreenButton = [self.contentView.window standardWindowButton:NSWindowZoomButton];
+     
+     [closeButton setFrameOrigin:NSMakePoint(12 + 5, -2)];
+     [miniaturizeButton setFrameOrigin:NSMakePoint(32 + 5, -2)];
+     [fullscreenButton setFrameOrigin:NSMakePoint(52 + 5, -2)];
+     
+     NSView *lights = closeButton.superview.superview;
+     NSRect newFrame = lights.frame;
+     //lights.layer.backgroundColor = [NSColor grayColor].CGColor;
+     newFrame.origin.y = self.contentView.frame.size.height - 8;
+     lights.frame = newFrame;
+     
+     NSTextView *titleView = closeButton.superview.subviews[3];
+     
+     titleView.font = [NSFont systemFontOfSize:13];
+     [titleView removeConstraints:titleView.constraints];
+     CGRect frame = titleView.frame;
+     frame.size.width = 200;
+     frame.origin.y = -1;
+     titleView.frame = frame;
+     titleView.drawsBackground = true;
+     
+     [super layoutIfNeeded];
+ }
+ 
  - (BOOL)titleChangedRecently {
      NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
      return (now > _timeOfLastWindowTitleChange && now - _timeOfLastWindowTitleChange < iTermWindowTitleChangeMinimumInterval);
  }
  
  - (void)setTitle:(NSString *)title {
!     [super setTitle:title]; // PATCH: (Modified) Change window title to "Terminal"
      _timeOfLastWindowTitleChange = [NSDate timeIntervalSinceReferenceDate];
  }
  
