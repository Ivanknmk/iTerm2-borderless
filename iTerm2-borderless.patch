diff --git a/ThirdParty/PSMTabBarControl/source/PSMDarkTabStyle.m b/ThirdParty/PSMTabBarControl/source/PSMDarkTabStyle.m
index e197d37..4585eda 100644
--- a/ThirdParty/PSMTabBarControl/source/PSMDarkTabStyle.m
+++ b/ThirdParty/PSMTabBarControl/source/PSMDarkTabStyle.m
@@ -17,14 +17,18 @@ - (NSString *)name {
 }
 
 + (NSColor *)tabBarColorWhenKeyAndActive:(BOOL)keyAndActive {
+    // PATCH: (Added) transparent tab bar
+    return [NSColor clearColor];
     if (@available(macOS 10.14, *)) {
-        return [NSColor colorWithSRGBRed:0 green:0 blue:0 alpha:0.25];
+        return [NSColor colorWithSRGBRed:0 green:0 blue:0 alpha:0.0];
     } else {
-        return [NSColor colorWithCalibratedWhite:0.12 alpha:1.00];
+        return [NSColor colorWithCalibratedWhite:0.12 alpha:0.00];
     }
 }
 
 - (NSColor *)tabBarColor {
+    // PATCH: (Added) transparent tab bar
+    return [NSColor clearColor];
     return [PSMDarkTabStyle tabBarColorWhenKeyAndActive:self.tabBar.window.isKeyWindow && [NSApp isActive]];
 }
 
@@ -53,6 +57,8 @@ - (NSColor *)topLineColorSelected:(BOOL)selected {
 }
 
 - (NSColor *)bottomLineColorSelected:(BOOL)selected {
+    // PATCH: (Added) transparent tab bar bottom line
+    return [NSColor clearColor];
     if (@available(macOS 10.14, *)) {
         return [NSColor colorWithWhite:0 alpha:0.1];
     } else {
@@ -61,6 +67,8 @@ - (NSColor *)bottomLineColorSelected:(BOOL)selected {
 }
 
 - (NSColor *)verticalLineColorSelected:(BOOL)selected {
+    // PATCH: (Added) transparent tab bar vertical line
+    return [NSColor clearColor];
     if (@available(macOS 10.14, *)) {
         return [self topLineColorSelected:selected];
     } else {
@@ -69,6 +77,8 @@ - (NSColor *)verticalLineColorSelected:(BOOL)selected {
 }
 
 - (NSColor *)backgroundColorSelected:(BOOL)selected highlightAmount:(CGFloat)highlightAmount {
+    // PATCH: (Added) transparent tab bar
+    return [NSColor clearColor];
     if (@available(macOS 10.14, *)) {
         CGFloat colors[3];
         if (self.tabBar.window.isKeyWindow && [NSApp isActive]) {
diff --git a/ThirdParty/PSMTabBarControl/source/PSMTabBarCell.m b/ThirdParty/PSMTabBarControl/source/PSMTabBarCell.m
index 0d83568..fa513b9 100644
--- a/ThirdParty/PSMTabBarControl/source/PSMTabBarCell.m
+++ b/ThirdParty/PSMTabBarControl/source/PSMTabBarCell.m
@@ -400,6 +400,8 @@ - (CGFloat)highlightAmount {
 
 - (void)mouseEntered:(NSEvent *)theEvent {
     // check for which tag
+    // PATCH: (Added) Don't show close button if the indicator is visible
+    if (self.hasIcon) return;
     if ([theEvent trackingNumber] == _closeButtonTrackingTag) {
         _closeButtonOver = YES;
     }
diff --git a/ThirdParty/PSMTabBarControl/source/PSMTabBarControl.m b/ThirdParty/PSMTabBarControl/source/PSMTabBarControl.m
index 54b162d..1cdc983 100644
--- a/ThirdParty/PSMTabBarControl/source/PSMTabBarControl.m
+++ b/ThirdParty/PSMTabBarControl/source/PSMTabBarControl.m
@@ -1858,9 +1858,7 @@ - (NSTabViewItem *)tabView:(NSTabView *)tabView unknownObjectWasDropped:(id <NSD
 
 - (NSString *)view:(NSView *)view stringForToolTip:(NSToolTipTag)tag point:(NSPoint)point userData:(void *)userData
 {
-    if ([[self delegate] respondsToSelector:@selector(tabView:toolTipForTabViewItem:)]) {
-        return [[self delegate] tabView:[self tabView] toolTipForTabViewItem:[[self cellForPoint:point cellFrame:nil] representedObject]];
-    }
+    // PATCH: (Removed) always return empty string for tab tooltips
     return @"";
 }
 
diff --git a/ThirdParty/PSMTabBarControl/source/PSMYosemiteTabStyle.m b/ThirdParty/PSMTabBarControl/source/PSMYosemiteTabStyle.m
index 1fd9750..57fe2db 100644
--- a/ThirdParty/PSMTabBarControl/source/PSMYosemiteTabStyle.m
+++ b/ThirdParty/PSMTabBarControl/source/PSMYosemiteTabStyle.m
@@ -162,12 +162,14 @@ - (void)dealloc {
 #pragma mark - Control Specific
 
 - (float)leftMarginForTabBarControl {
-    return self.tabBar.insets.left;
+    // PATCH: (Modified) make room for window controls
+    return 70.0f;
 }
 
 - (float)rightMarginForTabBarControl {
     // Leaves space for overflow control.
-    return 24.0f;
+    // PATCH: (Modified) equal left/right margins so single tab window titles are centered
+    return 70.0f;
 }
 
 // For vertical orientation
@@ -224,6 +226,11 @@ - (NSRect)closeButtonRectForTabCell:(PSMTabBarCell *)cell {
     result.origin.x = cellFrame.origin.x + kSPMTabBarCellInternalXMargin;
     result.origin.y = cellFrame.origin.y + floor((cellFrame.size.height - result.size.height) / 2.0);
 
+    // PATCH: (Added) Move closeButtonRect to display on the left of the tab cell label
+    result.origin.x += cellFrame.size.width / 2 - result.size.width - 13;
+    result.origin.x -= cell.attributedStringValue.size.width / 2;
+    result.origin.y += 1;
+    
     return result;
 }
 
@@ -459,7 +466,8 @@ - (NSAttributedString *)attributedStringValueForTabCell:(PSMTabBarCell *)cell {
     // graphic
     NSImage *graphic = [(id)[[cell representedObject] identifier] psmTabGraphic];
 
-    NSFont *font = [NSFont systemFontOfSize:self.fontSize];
+    // PATCH: (Modified) larger font size for tab label
+    NSFont *font = [NSFont systemFontOfSize:NSFont.systemFontSize];
     NSDictionary *attributes = @{ NSFontAttributeName: font,
                                   NSForegroundColorAttributeName: [self textColorForCell:cell],
                                   NSParagraphStyleAttributeName: truncatingTailParagraphStyle };
@@ -923,6 +931,8 @@ - (void)drawInteriorWithTabCell:(PSMTabBarCell *)cell
 
     // icon
     NSRect iconRect = NSZeroRect;
+    // PATCH: (Moved) we need to access this property later on
+    NSImage *icon = [(id)[[cell representedObject] identifier] icon];
     if ([cell hasIcon]) {
         iconRect = [self iconRectForTabCell:cell];
         NSImage *icon = [(id)[[cell representedObject] identifier] icon];
@@ -935,12 +945,8 @@ - (void)drawInteriorWithTabCell:(PSMTabBarCell *)cell
             iconRect.origin.y -= (kPSMTabBarIconWidth - [icon size].height)/2.0;
         }
 
-        [icon drawInRect:iconRect
-                fromRect:NSZeroRect
-               operation:NSCompositingOperationSourceOver
-                fraction:1.0
-          respectFlipped:YES
-                   hints:nil];
+        // PATCH: (Removed) Don't draw the icon yet,
+        // we need to mess with tht eframe first, see bottom of this method
     }
 
     // object counter
@@ -957,16 +963,12 @@ - (void)drawInteriorWithTabCell:(PSMTabBarCell *)cell
 
     // label rect
     NSAttributedString *attributedString = [cell attributedStringValue];
+    // PATCH: (Moved) we need to access this property later on
+    NSRect labelRect;
     if (attributedString.length > 0) {
-        NSRect labelRect;
         labelRect.origin.x = labelPosition;
         labelRect.size.width = cellFrame.size.width - (labelRect.origin.x - cellFrame.origin.x) - kPSMTabBarCellPadding;
-        if ([cell hasIcon]) {
-            // Reduce size of label if there is an icon or activity indicator
-            labelRect.size.width -= iconRect.size.width + kPSMTabBarCellIconPadding;
-        } else if (![[cell indicator] isHidden]) {
-            labelRect.size.width -= cell.indicator.frame.size.width + kPSMTabBarCellIconPadding;
-        }
+        // PATCH: (Removed) Don't mmove the label to the left if the indicator is visible
         labelRect.size.height = cellFrame.size.height;
 
         if ([cell count] > 0) {
@@ -989,6 +991,19 @@ - (void)drawInteriorWithTabCell:(PSMTabBarCell *)cell
 
         [attributedString drawInRect:labelRect];
     }
+    
+    // PATCH: (Added) modify the icon frame and draw it
+    if ([cell hasIcon]) {
+        iconRect.origin.x -= labelRect.size.width / 2 + attributedString.size.width / 2 - 13;
+        iconRect.origin.x -= iconRect.size.width; // Remove if we don't move the label over;
+        iconRect.origin.y += 1;
+        [icon drawInRect:iconRect
+                fromRect:NSZeroRect
+               operation:NSCompositingOperationSourceOver
+                fraction:1.0
+          respectFlipped:YES
+                   hints:nil];
+    }
 }
 
 - (NSColor *)tabBarColor {
@@ -1105,8 +1120,9 @@ - (void)drawTabBar:(PSMTabBarControl *)bar
     } else {
         insetRect = clipRect;
     }
-    [self drawHorizontalLineInFrame:NSIntersectionRect(clipRect, insetRect) y:0];
-
+    
+    // PATCH: (Removed) Don't draw horizontal lines for tabview
+    
     // no tab view == not connected
     if (![bar tabView]) {
         NSRect labelRect = rect;
diff --git a/iTerm2.xcodeproj/project.pbxproj b/iTerm2.xcodeproj/project.pbxproj
index 78ef8f4..0ee299e 100644
--- a/iTerm2.xcodeproj/project.pbxproj
+++ b/iTerm2.xcodeproj/project.pbxproj
@@ -9529,7 +9529,8 @@
 						DevelopmentTeam = H7V7XYVQ7D;
 					};
 					874206460564169600CFC3F1 = {
-						ProvisioningStyle = Manual;
+						DevelopmentTeam = 4688J3MK2P;
+						ProvisioningStyle = Automatic;
 						SystemCapabilities = {
 							com.apple.HardenedRuntime = {
 								enabled = 0;
@@ -11972,11 +11973,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -12112,7 +12113,7 @@
 				CODE_SIGN_IDENTITY = "Mac Developer";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = H7V7XYVQ7D;
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(SRCROOT)",
@@ -12603,11 +12604,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -12779,7 +12780,7 @@
 				CODE_SIGN_IDENTITY = "Mac Developer";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = H7V7XYVQ7D;
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(SRCROOT)",
@@ -13644,12 +13645,12 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -13721,11 +13722,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
diff --git a/sources/PTYSession.m b/sources/PTYSession.m
index 624603c..2494f98 100644
--- a/sources/PTYSession.m
+++ b/sources/PTYSession.m
@@ -3583,7 +3583,9 @@ - (void)setPreferencesFromAddressBookEntry:(NSDictionary *)aePrefs {
                                                        inBookmark:aDict]];
 
     // transparency
-    [self setTransparency:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:aDict]];
+    // PATCH: (Modified) now the window appears semi-transparent, not the terminal
+    // So if it's not opaque, make the terminal fully transparent
+    [self setTransparency:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:aDict] == 0 ? 0 : 1];
     [self setBlend:[iTermProfilePreferences floatForKey:KEY_BLEND inProfile:aDict]];
     [self setTransparencyAffectsOnlyDefaultBackgroundColor:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY_AFFECTS_ONLY_DEFAULT_BACKGROUND_COLOR inProfile:aDict]];
 
@@ -3981,10 +3983,7 @@ - (float)transparency
 
 - (void)setTransparency:(float)transparency
 {
-    // Limit transparency because fully transparent windows can't be clicked on.
-    if (transparency > 0.9) {
-        transparency = 0.9;
-    }
+    // PATCH: (Removed) ignore limit, make terminal fully transparent, they can still be clicked
     [_textview setTransparency:transparency];
     [self useTransparencyDidChange];
     [self.view setNeedsDisplay:YES];
diff --git a/sources/PTYTab.m b/sources/PTYTab.m
index 54ddef3..6d8680d 100644
--- a/sources/PTYTab.m
+++ b/sources/PTYTab.m
@@ -584,7 +584,8 @@ - (void)nameOfSession:(PTYSession *)session didChangeTo:(NSString*)newName {
 
 - (void)updateTabTitleForCurrentSessionName:(NSString *)newName {
     NSString *value = (self.evaluatedTitleOverride ?: newName) ?: @" ";
-    [tabViewItem_ setLabel:value];  // PSM uses bindings to bind the label to its title
+    // PATCH: (Modified) set tab view label to the window title if it's set
+    [tabViewItem_ setLabel:self.activeSession.windowTitle.length != 0 ? self.activeSession.windowTitle : value];  // PSM uses bindings to bind the label to its title
     [self.realParentWindow tabTitleDidChange:self];
 }
 
diff --git a/sources/PTYTextView.m b/sources/PTYTextView.m
index 3359c5a..f3a6aaa 100644
--- a/sources/PTYTextView.m
+++ b/sources/PTYTextView.m
@@ -587,7 +587,8 @@ - (BOOL)isFlipped
 
 - (BOOL)isOpaque
 {
-    return YES;
+    // PATCH: (Modified) transparent so we can see our semi-transparent window
+    return NO;
 }
 
 - (void)setHighlightCursorLine:(BOOL)highlightCursorLine {
diff --git a/sources/PseudoTerminal.m b/sources/PseudoTerminal.m
index 04262b2..dea52c2 100644
--- a/sources/PseudoTerminal.m
+++ b/sources/PseudoTerminal.m
@@ -404,12 +404,12 @@ + (void)registerSessionsInArrangement:(NSDictionary *)arrangement {
 }
 
 + (void)updateDecorationsOfWindow:(NSWindow *)myWindow forType:(iTermWindowType)windowType {
-    const BOOL isCompact = (windowType == WINDOW_TYPE_COMPACT);
-    [myWindow setHasShadow:(windowType == WINDOW_TYPE_NORMAL ||
-                            isCompact)];
-    // Chrome doesn't change titleVisibility so neither do we.
-    // Some truly dreadful hacks are used instead. See PTYWindow.m.
-    myWindow.titlebarAppearsTransparent = isCompact;
+    // PATCH: (Modified) Native macOS window shadow
+    [myWindow setHasShadow:YES];
+    [myWindow setTitleVisibility:NSWindowTitleHidden];
+    
+    // PATCH: (Modified) Hides title bar strip for our tab view instead
+    myWindow.titlebarAppearsTransparent = YES;
 }
 
 + (NSInteger)styleMaskForWindowType:(iTermWindowType)windowType
@@ -418,6 +418,10 @@ + (NSInteger)styleMaskForWindowType:(iTermWindowType)windowType
     if (hotkeyWindowType == iTermHotkeyWindowTypeFloatingPanel) {
         mask = NSWindowStyleMaskNonactivatingPanel;
     }
+    
+    // PATCH: (Added) Always use full size content view
+    mask |= NSWindowStyleMaskFullSizeContentView;
+    
     switch (windowType) {
         case WINDOW_TYPE_TOP:
         case WINDOW_TYPE_BOTTOM:
@@ -1853,7 +1857,8 @@ - (void)setWindowTitle {
     if (self.isShowingTransientTitle) {
         PTYSession *session = self.currentSession;
         NSString *aTitle;
-        if (self.window.frame.size.width < 250) {
+        // PATCH: (Modified) check tab width for displaying size when resizing
+        if (self.window.frame.size.width / (self.tabs.count) < 200) {
             aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
         } else {
             aTitle = [NSString stringWithFormat:@"%@ \u2014 %d✕%d",
@@ -3549,12 +3554,8 @@ - (NSEdgeInsets)tabBarInsets {
 }
 
 - (BOOL)tabBarAlwaysVisible {
-    if (@available(macOS 10.14, *)) {
-        if (togglingLionFullScreen_ || [self lionFullScreen]) {
-            return YES;
-        }
-    }
-    return ![iTermPreferences boolForKey:kPreferenceKeyHideTabBar];
+    // PATCH: (Added) always show tab bar
+    return YES;
 }
 
 - (BOOL)anyFullScreen
@@ -4157,8 +4158,7 @@ - (void)toggleTraditionalFullScreenMode {
         }
         PtyLog(@"toggleFullScreenMode - allocate new terminal");
     }
-    [self.window setHasShadow:(windowType_ == WINDOW_TYPE_NORMAL ||
-                               windowType_ == WINDOW_TYPE_COMPACT)];
+    [self.window setHasShadow:YES]; // PATCH: (Modified) always set window shadow
 
     if (!_fullScreen &&
         [iTermPreferences boolForKey:kPreferenceKeyDisableFullscreenTransparencyByDefault]) {
@@ -4277,7 +4277,7 @@ - (void)updateWindowShadow {
         if ([iTermAdvancedSettingsModel disableWindowShadowWhenTransparencyOnMojave]) {
             const BOOL haveTransparency = [self anySessionInCurrentTabHasTransparency];
             DLog(@"%@: have transparency = %@ for sessions %@ in tab %@", self, @(haveTransparency), self.currentTab.sessions, self.currentTab);
-            self.window.hasShadow = !haveTransparency;
+            self.window.hasShadow = YES; // PATCH: (Modified) always has window shadow
         }
     }
 }
@@ -5611,9 +5611,10 @@ - (void)updateTabColors {
         [_contentView.tabBarControl setTabColor:color forTabViewItem:tabViewItem];
         if ([_contentView.tabView selectedTabViewItem] == tabViewItem) {
             NSColor* newTabColor = [_contentView.tabBarControl tabColorForTabViewItem:tabViewItem];
-            if ([_contentView.tabView numberOfTabViewItems] == 1 &&
-                [iTermPreferences boolForKey:kPreferenceKeyHideTabBar] &&
-                newTabColor) {
+            if (YES) { // PATCH: (Modified) always use the tab color
+                // PATCH: (Added) set window title background so it renders properly
+                //NSTextView *titleView = [self.contentView.window standardWindowButton:NSWindowCloseButton].superview.subviews[3];
+                //titleView.backgroundColor = [aSession.colorMap colorForKey:kColorMapBackground];
                 [self setBackgroundColor:newTabColor];
 
                 [_contentView setColor:newTabColor];
@@ -5656,7 +5657,11 @@ - (void)setMojaveBackgroundColor:(nullable NSColor *)backgroundColor NS_AVAILABL
             self.window.appearance = [NSAppearance appearanceNamed:NSAppearanceNameDarkAqua];
             break;
     }
-    self.window.backgroundColor = self.anyPaneIsTransparent ? [NSColor clearColor] : [NSColor windowBackgroundColor];
+    // PATCH: (Modified) set window background color so our transparent title bar doesn't show behind the window
+    backgroundColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    backgroundColor = [backgroundColor colorWithAlphaComponent:1 - [iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:self.currentSession.profile]];
+    
+    self.window.backgroundColor = backgroundColor;
     self.window.titlebarAppearsTransparent = NO;  // Keep it from showing content from other windows behind it. Issue 7108.
 }
 
@@ -5695,6 +5700,10 @@ - (void)setLegacyBackgroundColor:(nullable NSColor *)backgroundColor {
         }
         darkAppearance = (backgroundColor != nil && backgroundColor.perceivedBrightness < 0.5);
     }
+    
+    // PATCH: (Added) set window background color to terminal background color
+    backgroundColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    
     [self.window setBackgroundColor:backgroundColor];
     if (darkAppearance) {
         self.window.appearance = [NSAppearance appearanceNamed:NSAppearanceNameVibrantDark];
diff --git a/sources/iTermAdvancedSettingsModel.h b/sources/iTermAdvancedSettingsModel.h
index f515a97..5783ae5 100644
--- a/sources/iTermAdvancedSettingsModel.h
+++ b/sources/iTermAdvancedSettingsModel.h
@@ -189,6 +189,13 @@ extern NSString *const iTermAdvancedSettingsDidChange;
 + (int)slowPasteBytesPerCall;
 + (double)slowPasteDelayBetweenCalls;
 
+// PATCH: (Added) iTerm2-borderless Features
++ (double)timeBeforeBlinks;
++ (BOOL)setCursorForegroundColor;
++ (NSString *)windowTitleFormat;
++ (int)standardWindowButtonsHorizontalOffset;
++ (int)standardWindowButtonsVerticalOffset;
+
 // The cursor's background goes to the "most different" color from its neighbors if the difference
 // in brightness between the proposed background color and the neighbors' background color is less
 // than this threshold.
diff --git a/sources/iTermAdvancedSettingsModel.m b/sources/iTermAdvancedSettingsModel.m
index a1bfd21..100560c 100644
--- a/sources/iTermAdvancedSettingsModel.m
+++ b/sources/iTermAdvancedSettingsModel.m
@@ -271,6 +271,14 @@ + (void)enumerateDictionaries:(void (^)(NSDictionary *))block {
 //   `-----'  :      :
 DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, SECTION_MOUSE @"Fraction of character’s width on its right side that can be used to select the character to its right.");
 
+// PATCH: (Added) iTerm2-borderless Features
+#pragma mark iTerm2-borderless Preferences
+DEFINE_FLOAT(timeBeforeBlinks, 0.5, @"iTerm2-borderless Features: Duration before cursor starts blinking.");
+DEFINE_BOOL(setCursorForegroundColor, YES, @"iTerm2-borderless Features: Set cursor foreground color.");
+DEFINE_STRING(windowTitleFormat, @"%@", @"iTerm2-borderless Features: Window title format\n“%@” represents the current session name, e.g. 'Terminal - %@'")
+DEFINE_INT(standardWindowButtonsHorizontalOffset, 17, @"iTerm2-borderless Features: Standard window buttons horizontal offset")
+DEFINE_INT(standardWindowButtonsVerticalOffset, 8, @"iTerm2-borderless Features: Standard window buttons vertical offset")
+
 #pragma mark Terminal
 
 #define SECTION_TERMINAL @"Terminal: "
diff --git a/sources/iTermCursor.m b/sources/iTermCursor.m
index a38fd56..c944dd6 100644
--- a/sources/iTermCursor.m
+++ b/sources/iTermCursor.m
@@ -209,9 +209,10 @@ - (void)drawWithRect:(NSRect)rect
                                      coord:coord];
         } else {
             // Non-smart
+            // PATCH: (Modified) Set cursor foreground color
             [self.delegate cursorDrawCharacterAt:coord
                                      doubleWidth:doubleWidth
-                                   overrideColor:foregroundColor
+                                   overrideColor:[iTermAdvancedSettingsModel setCursorForegroundColor] == YES ? foregroundColor : nil
                                          context:ctx
                                  backgroundColor:backgroundColor];
         }
diff --git a/sources/iTermRootTerminalView.m b/sources/iTermRootTerminalView.m
index b1d5a10..8d050c1 100644
--- a/sources/iTermRootTerminalView.m
+++ b/sources/iTermRootTerminalView.m
@@ -136,7 +136,7 @@ - (instancetype)initWithFrame:(NSRect)frameRect
                 [self setTabBarControlAutoresizingMask:(NSViewHeightSizable | NSViewMaxXMargin)];
                 break;
         }
-        if (@available(macOS 10.14, *)) {
+        if (NO) {
             [self addSubview:_tabBarBacking];
             [_tabBarBacking addSubview:_tabBarControl];
         } else {
@@ -695,7 +695,8 @@ - (void)layoutSubviewsTopTabBarVisible:(BOOL)topTabBarVisible forWindow:(NSWindo
 }
 
 - (void)setTabBarFrame:(NSRect)frame {
-    if (@available(macOS 10.14, *)) {
+    frame.origin.y -= 10;
+    if (NO) {
         assert(!_tabBarControlOnLoan);
         _tabBarBacking.frame = frame;
         self.tabBarControl.frame = _tabBarBacking.bounds;
diff --git a/sources/iTermTabBarControlView.m b/sources/iTermTabBarControlView.m
index 4be80cf..b4014de 100644
--- a/sources/iTermTabBarControlView.m
+++ b/sources/iTermTabBarControlView.m
@@ -13,7 +13,7 @@
 #import "NSObject+iTerm.h"
 #import "NSView+iTerm.h"
 
-CGFloat iTermTabBarControlViewDefaultHeight = 24;
+CGFloat iTermTabBarControlViewDefaultHeight = 22; // PATCH: (Modified) hide tab bar
 
 @interface NSView (Private)
 - (NSRect)_opaqueRectForWindowMoveWhenInTitlebar;
@@ -49,8 +49,8 @@ - (instancetype)initWithFrame:(NSRect)frameRect {
 
 - (void)drawRect:(NSRect)dirtyRect {
     if (@available(macOS 10.14, *)) { } else {
-        [[NSColor windowBackgroundColor] set];
-        NSRectFill(dirtyRect);
+        [[NSColor clearColor] set];
+        //NSRectFill(dirtyRect);
     }
 
     [super drawRect:dirtyRect];
@@ -245,7 +245,8 @@ - (void)setFlashState:(iTermTabBarFlashState)flashState {
 #pragma mark - Window Dragging
 
 - (BOOL)mouseDownCanMoveWindow {
-    return [self.itermTabBarDelegate iTermTabBarCanDragWindow] ? NO : [super mouseDownCanMoveWindow];
+    // PATCH: (Modified) make it easier to drag the window without the tab bar getting in the way
+    return YES;
 }
 
 - (NSRect)_opaqueRectForWindowMoveWhenInTitlebar {
diff --git a/sources/iTermTextDrawingHelper.m b/sources/iTermTextDrawingHelper.m
index 49bbd96..9977aac 100644
--- a/sources/iTermTextDrawingHelper.m
+++ b/sources/iTermTextDrawingHelper.m
@@ -2586,10 +2586,11 @@ - (NSColor *)backgroundColorForCursor {
 }
 
 - (BOOL)shouldShowCursor {
+    // PATCH: (Modified) Blink delay after moving the cursor
     if (_cursorBlinking &&
         self.isInKeyWindow &&
         _textViewIsActiveSession &&
-        [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > 0.5) {
+        [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > [iTermAdvancedSettingsModel timeBeforeBlinks]) {
         // Allow the cursor to blink if it is configured, the window is key, this session is active
         // in the tab, and the cursor has not moved for half a second.
         return _blinkingItemsVisible;
diff --git a/sources/iTermWindowImpl.m b/sources/iTermWindowImpl.m
index 235077c..bc42c3d 100644
--- a/sources/iTermWindowImpl.m
+++ b/sources/iTermWindowImpl.m
@@ -60,6 +60,45 @@ - (void)iterm_dealloc {
 
 }
 
+// PATCH: (Added) Modify standard title bar
+- (void)layoutIfNeeded {
+    NSButton *closeButton = [self.contentView.window standardWindowButton:NSWindowCloseButton];
+    NSButton *miniaturizeButton = [self.contentView.window standardWindowButton:NSWindowMiniaturizeButton];
+    NSButton *fullscreenButton = [self.contentView.window standardWindowButton:NSWindowZoomButton];
+    
+    int horizOff = [iTermAdvancedSettingsModel standardWindowButtonsHorizontalOffset];
+    int vertOff = [iTermAdvancedSettingsModel standardWindowButtonsVerticalOffset] + 20;
+    
+    [closeButton setFrameOrigin:NSMakePoint(0 + horizOff, 3)];
+    [miniaturizeButton setFrameOrigin:NSMakePoint(20 + horizOff, 3)];
+    [fullscreenButton setFrameOrigin:NSMakePoint(40 + horizOff, 3)];
+    
+    NSView *lights = closeButton.superview.superview;
+    if (lights) {
+        NSRect newFrame = lights.frame;
+        newFrame.origin.y = self.contentView.frame.size.height - vertOff;
+        lights.frame = newFrame;
+    }
+    
+    
+    self.titlebarAppearsTransparent = true;
+    
+    NSView *decorationView = closeButton.superview.superview.subviews[1];
+    decorationView.layer.opacity = 0.0;
+    
+    /*
+    NSTextView *titleView = closeButton.superview.subviews[3];
+    titleView.font = [NSFont systemFontOfSize:13];
+    [titleView removeConstraints:titleView.constraints];
+    CGRect frame = titleView.frame;
+    frame.size.width = 200;
+    frame.origin.y = 3;
+    titleView.frame = frame;
+    titleView.drawsBackground = true;
+ */
+    [super layoutIfNeeded];
+}
+
 - (BOOL)titleChangedRecently {
     NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
     return (now > _timeOfLastWindowTitleChange && now - _timeOfLastWindowTitleChange < iTermWindowTitleChangeMinimumInterval);
