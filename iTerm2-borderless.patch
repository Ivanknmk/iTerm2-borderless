diff --git a/iTerm2.xcodeproj/project.pbxproj b/iTerm2.xcodeproj/project.pbxproj
index b3803e9..7ac83a8 100644
--- a/iTerm2.xcodeproj/project.pbxproj
+++ b/iTerm2.xcodeproj/project.pbxproj
@@ -9508,7 +9508,8 @@
 						DevelopmentTeam = H7V7XYVQ7D;
 					};
 					874206460564169600CFC3F1 = {
-						ProvisioningStyle = Manual;
+						DevelopmentTeam = 4688J3MK2P;
+						ProvisioningStyle = Automatic;
 						SystemCapabilities = {
 							com.apple.HardenedRuntime = {
 								enabled = 0;
@@ -11948,11 +11949,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -12088,7 +12089,7 @@
 				CODE_SIGN_IDENTITY = "Mac Developer";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = H7V7XYVQ7D;
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(SRCROOT)",
@@ -12579,11 +12580,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -12755,7 +12756,7 @@
 				CODE_SIGN_IDENTITY = "Mac Developer";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = H7V7XYVQ7D;
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(SRCROOT)",
@@ -13620,12 +13621,12 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -13697,11 +13698,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
diff --git a/sources/PTYSession.m b/sources/PTYSession.m
index a73e7f7..999dccc 100644
--- a/sources/PTYSession.m
+++ b/sources/PTYSession.m
@@ -3575,7 +3575,9 @@ - (void)setPreferencesFromAddressBookEntry:(NSDictionary *)aePrefs {
                                                        inBookmark:aDict]];
 
     // transparency
-    [self setTransparency:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:aDict]];
+    // PATCH: (Modified) now the window appears semi-transparent, not the terminal
+    // So if it's not opaque, make the terminal fully transparent
+    [self setTransparency:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:aDict] == 0 ? 0 : 1];
     [self setBlend:[iTermProfilePreferences floatForKey:KEY_BLEND inProfile:aDict]];
     [self setTransparencyAffectsOnlyDefaultBackgroundColor:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY_AFFECTS_ONLY_DEFAULT_BACKGROUND_COLOR inProfile:aDict]];
 
@@ -3973,10 +3975,7 @@ - (float)transparency
 
 - (void)setTransparency:(float)transparency
 {
-    // Limit transparency because fully transparent windows can't be clicked on.
-    if (transparency > 0.9) {
-        transparency = 0.9;
-    }
+    // PATCH: (Removed) ignore limit, make terminal fully transparent, they can still be clicked
     [_textview setTransparency:transparency];
     [self useTransparencyDidChange];
     [self.view setNeedsDisplay:YES];
diff --git a/sources/PseudoTerminal.m b/sources/PseudoTerminal.m
index 3676c91..6bb7ce1 100644
--- a/sources/PseudoTerminal.m
+++ b/sources/PseudoTerminal.m
@@ -397,12 +397,10 @@ + (void)registerSessionsInArrangement:(NSDictionary *)arrangement {
 }
 
 + (void)updateDecorationsOfWindow:(NSWindow *)myWindow forType:(iTermWindowType)windowType {
-    const BOOL isCompact = (windowType == WINDOW_TYPE_COMPACT);
-    [myWindow setHasShadow:(windowType == WINDOW_TYPE_NORMAL ||
-                            isCompact)];
+    [myWindow setHasShadow:YES]; // PATCH: (Modified) Native macOS window shadow
     // Chrome doesn't change titleVisibility so neither do we.
     // Some truly dreadful hacks are used instead. See PTYWindow.m.
-    myWindow.titlebarAppearsTransparent = isCompact;
+    myWindow.titlebarAppearsTransparent = YES; // PATCH: (Modified) Hides title bar strip
 }
 
 + (NSInteger)styleMaskForWindowType:(iTermWindowType)windowType
@@ -1785,18 +1783,16 @@ - (PTYSession *)currentSession {
 - (void)setWindowTitle {
     if (self.isShowingTransientTitle) {
         PTYSession *session = self.currentSession;
+        // PATCH: (Modified) just show window dimensions while resizing
         NSString *aTitle;
-        if (self.window.frame.size.width < 250) {
-            aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
-        } else {
-            aTitle = [NSString stringWithFormat:@"%@ \u2014 %d✕%d",
-                      [self undecoratedWindowTitle],
-                      [session columns],
-                      [session rows]];
-        }
+        aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
         [self setWindowTitle:aTitle];
     } else {
-        [self setWindowTitle:[self undecoratedWindowTitle]];
+        // PATCH: (Modified) show current process name if the window title isn't set.
+        NSString *aTitle;
+        aTitle = [self undecoratedWindowTitle];
+        aTitle = aTitle.length != 0 ? aTitle : [self.currentSession name];
+        [self setWindowTitle:aTitle];
     }
 }
 
@@ -4066,8 +4062,7 @@ - (void)toggleTraditionalFullScreenMode {
         }
         PtyLog(@"toggleFullScreenMode - allocate new terminal");
     }
-    [self.window setHasShadow:(windowType_ == WINDOW_TYPE_NORMAL ||
-                               windowType_ == WINDOW_TYPE_COMPACT)];
+    [self.window setHasShadow:YES]; // PATCH: (Modified) always set window shadow
 
     if (!_fullScreen &&
         [iTermPreferences boolForKey:kPreferenceKeyDisableFullscreenTransparencyByDefault]) {
@@ -4186,7 +4181,7 @@ - (void)updateWindowShadow {
         if ([iTermAdvancedSettingsModel disableWindowShadowWhenTransparencyOnMojave]) {
             const BOOL haveTransparency = [self anySessionInCurrentTabHasTransparency];
             DLog(@"%@: have transparency = %@ for sessions %@ in tab %@", self, @(haveTransparency), self.currentTab.sessions, self.currentTab);
-            self.window.hasShadow = !haveTransparency;
+            self.window.hasShadow = YES; // PATCH: (Modified) always has window shadow
         }
     }
 }
@@ -5502,9 +5497,10 @@ - (void)updateTabColors {
         [_contentView.tabBarControl setTabColor:color forTabViewItem:tabViewItem];
         if ([_contentView.tabView selectedTabViewItem] == tabViewItem) {
             NSColor* newTabColor = [_contentView.tabBarControl tabColorForTabViewItem:tabViewItem];
-            if ([_contentView.tabView numberOfTabViewItems] == 1 &&
-                [iTermPreferences boolForKey:kPreferenceKeyHideTabBar] &&
-                newTabColor) {
+            if (YES) { // PATCH: (Modified) always use the tab color
+                // PATCH: (Added) set window title background so it renders properly
+                //NSTextView *titleView = [self.contentView.window standardWindowButton:NSWindowCloseButton].superview.subviews[3];
+                //titleView.backgroundColor = [aSession.colorMap colorForKey:kColorMapBackground];
                 [self setBackgroundColor:newTabColor];
 
                 [_contentView setColor:newTabColor];
@@ -5547,7 +5543,11 @@ - (void)setMojaveBackgroundColor:(nullable NSColor *)backgroundColor NS_AVAILABL
             self.window.appearance = [NSAppearance appearanceNamed:NSAppearanceNameDarkAqua];
             break;
     }
-    self.window.backgroundColor = self.anyPaneIsTransparent ? [NSColor clearColor] : [NSColor windowBackgroundColor];
+    // PATCH: (Modified) set window background color so our transparent title bar doesn't show behind the window
+    backgroundColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    backgroundColor = [backgroundColor colorWithAlphaComponent:1 - [iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:self.currentSession.profile]];
+    
+    self.window.backgroundColor = backgroundColor;
     self.window.titlebarAppearsTransparent = NO;  // Keep it from showing content from other windows behind it. Issue 7108.
 }
 
@@ -5586,6 +5586,10 @@ - (void)setLegacyBackgroundColor:(nullable NSColor *)backgroundColor {
         }
         darkAppearance = (backgroundColor != nil && backgroundColor.perceivedBrightness < 0.5);
     }
+    
+    // PATCH: (Added) set window background color to terminal background color
+    backgroundColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    
     [self.window setBackgroundColor:backgroundColor];
     if (darkAppearance) {
         self.window.appearance = [NSAppearance appearanceNamed:NSAppearanceNameVibrantDark];
diff --git a/sources/iTermAdvancedSettingsModel.h b/sources/iTermAdvancedSettingsModel.h
index 1919965..5413c23 100644
--- a/sources/iTermAdvancedSettingsModel.h
+++ b/sources/iTermAdvancedSettingsModel.h
@@ -188,6 +188,13 @@ extern NSString *const iTermAdvancedSettingsDidChange;
 + (int)slowPasteBytesPerCall;
 + (double)slowPasteDelayBetweenCalls;
 
+// PATCH: (Added) iTerm2-borderless Features
++ (double)timeBeforeBlinks;
++ (BOOL)setCursorForegroundColor;
++ (NSString *)windowTitleFormat;
++ (int)standardWindowButtonsHorizontalOffset;
++ (int)standardWindowButtonsVerticalOffset;
+
 // The cursor's background goes to the "most different" color from its neighbors if the difference
 // in brightness between the proposed background color and the neighbors' background color is less
 // than this threshold.
diff --git a/sources/iTermAdvancedSettingsModel.m b/sources/iTermAdvancedSettingsModel.m
index cbbfba4..aeabc01 100644
--- a/sources/iTermAdvancedSettingsModel.m
+++ b/sources/iTermAdvancedSettingsModel.m
@@ -270,6 +270,14 @@ + (void)enumerateDictionaries:(void (^)(NSDictionary *))block {
 //   `-----'  :      :
 DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, SECTION_MOUSE @"Fraction of character’s width on its right side that can be used to select the character to its right.");
 
+// PATCH: (Added) iTerm2-borderless Features
+#pragma mark iTerm2-borderless Preferences
+DEFINE_FLOAT(timeBeforeBlinks, 0.5, @"iTerm2-borderless Features: Duration before cursor starts blinking.");
+DEFINE_BOOL(setCursorForegroundColor, YES, @"iTerm2-borderless Features: Set cursor foreground color.");
+DEFINE_STRING(windowTitleFormat, @"%@", @"iTerm2-borderless Features: Window title format\n“%@” represents the current session name, e.g. 'Terminal - %@'")
+DEFINE_INT(standardWindowButtonsHorizontalOffset, 17, @"iTerm2-borderless Features: Standard window buttons horizontal offset")
+DEFINE_INT(standardWindowButtonsVerticalOffset, 8, @"iTerm2-borderless Features: Standard window buttons vertical offset")
+
 #pragma mark Terminal
 
 #define SECTION_TERMINAL @"Terminal: "
diff --git a/sources/iTermBackgroundDrawingHelper.m b/sources/iTermBackgroundDrawingHelper.m
index d37d372..bda2246 100644
--- a/sources/iTermBackgroundDrawingHelper.m
+++ b/sources/iTermBackgroundDrawingHelper.m
@@ -15,6 +15,7 @@ @implementation iTermBackgroundDrawingHelper {
 - (void)drawBackgroundImageInView:(NSView *)view
                          viewRect:(NSRect)rect
            blendDefaultBackground:(BOOL)blendDefaultBackground {
+    return;
     const float alpha = [self.delegate backgroundDrawingHelperUseTransparency] ? (1.0 - [self.delegate backgroundDrawingHelperTransparency]) : 1.0;
     NSImage *backgroundImage = [self.delegate backgroundDrawingHelperImage];
     if (backgroundImage) {
diff --git a/sources/iTermCursor.m b/sources/iTermCursor.m
index a38fd56..c944dd6 100644
--- a/sources/iTermCursor.m
+++ b/sources/iTermCursor.m
@@ -209,9 +209,10 @@ - (void)drawWithRect:(NSRect)rect
                                      coord:coord];
         } else {
             // Non-smart
+            // PATCH: (Modified) Set cursor foreground color
             [self.delegate cursorDrawCharacterAt:coord
                                      doubleWidth:doubleWidth
-                                   overrideColor:foregroundColor
+                                   overrideColor:[iTermAdvancedSettingsModel setCursorForegroundColor] == YES ? foregroundColor : nil
                                          context:ctx
                                  backgroundColor:backgroundColor];
         }
diff --git a/sources/iTermTabBarControlView.m b/sources/iTermTabBarControlView.m
index 4be80cf..ff70a67 100644
--- a/sources/iTermTabBarControlView.m
+++ b/sources/iTermTabBarControlView.m
@@ -13,7 +13,7 @@
 #import "NSObject+iTerm.h"
 #import "NSView+iTerm.h"
 
-CGFloat iTermTabBarControlViewDefaultHeight = 24;
+CGFloat iTermTabBarControlViewDefaultHeight = 0; // PATCH: (Modified) hide tab bar
 
 @interface NSView (Private)
 - (NSRect)_opaqueRectForWindowMoveWhenInTitlebar;
diff --git a/sources/iTermTextDrawingHelper.m b/sources/iTermTextDrawingHelper.m
index 7535309..a88de53 100644
--- a/sources/iTermTextDrawingHelper.m
+++ b/sources/iTermTextDrawingHelper.m
@@ -2585,10 +2585,11 @@ - (NSColor *)backgroundColorForCursor {
 }
 
 - (BOOL)shouldShowCursor {
+    // PATCH: (Modified) Blink delay after moving the cursor
     if (_cursorBlinking &&
         self.isInKeyWindow &&
         _textViewIsActiveSession &&
-        [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > 0.5) {
+        [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > [iTermAdvancedSettingsModel timeBeforeBlinks]) {
         // Allow the cursor to blink if it is configured, the window is key, this session is active
         // in the tab, and the cursor has not moved for half a second.
         return _blinkingItemsVisible;
diff --git a/sources/iTermWindowImpl.m b/sources/iTermWindowImpl.m
index 22c7528..09cc5bb 100644
--- a/sources/iTermWindowImpl.m
+++ b/sources/iTermWindowImpl.m
@@ -60,6 +60,45 @@ - (void)iterm_dealloc {
 
 }
 
+// PATCH: (Added) Modify standard title bar
+- (void)layoutIfNeeded {
+    NSButton *closeButton = [self.contentView.window standardWindowButton:NSWindowCloseButton];
+    NSButton *miniaturizeButton = [self.contentView.window standardWindowButton:NSWindowMiniaturizeButton];
+    NSButton *fullscreenButton = [self.contentView.window standardWindowButton:NSWindowZoomButton];
+    
+    int horizOff = [iTermAdvancedSettingsModel standardWindowButtonsHorizontalOffset];
+    int vertOff = [iTermAdvancedSettingsModel standardWindowButtonsVerticalOffset];
+    
+    [closeButton setFrameOrigin:NSMakePoint(0 + horizOff, 3)];
+    [miniaturizeButton setFrameOrigin:NSMakePoint(20 + horizOff, 3)];
+    [fullscreenButton setFrameOrigin:NSMakePoint(40 + horizOff, 3)];
+    
+    NSView *lights = closeButton.superview.superview;
+    if (lights) {
+        NSRect newFrame = lights.frame;
+        newFrame.origin.y = self.contentView.frame.size.height - vertOff;
+        lights.frame = newFrame;
+    }
+    
+    
+    self.titlebarAppearsTransparent = true;
+    
+    NSView *decorationView = closeButton.superview.superview.subviews[1];
+    decorationView.layer.opacity = 0.0;
+    
+    /*
+    NSTextView *titleView = closeButton.superview.subviews[3];
+    titleView.font = [NSFont systemFontOfSize:13];
+    [titleView removeConstraints:titleView.constraints];
+    CGRect frame = titleView.frame;
+    frame.size.width = 200;
+    frame.origin.y = 3;
+    titleView.frame = frame;
+    titleView.drawsBackground = true;
+ */
+    [super layoutIfNeeded];
+}
+
 - (BOOL)titleChangedRecently {
     NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
     return (now > _timeOfLastWindowTitleChange && now - _timeOfLastWindowTitleChange < iTermWindowTitleChangeMinimumInterval);
