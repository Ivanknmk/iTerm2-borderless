diff --git a/iTerm2.xcodeproj/project.pbxproj b/iTerm2.xcodeproj/project.pbxproj
index ba7ad6001..c5a656d07 100644
--- a/iTerm2.xcodeproj/project.pbxproj
+++ b/iTerm2.xcodeproj/project.pbxproj
@@ -9487,7 +9487,8 @@
 						DevelopmentTeam = H7V7XYVQ7D;
 					};
 					874206460564169600CFC3F1 = {
-						ProvisioningStyle = Manual;
+						DevelopmentTeam = 4688J3MK2P;
+						ProvisioningStyle = Automatic;
 						SystemCapabilities = {
 							com.apple.HardenedRuntime = {
 								enabled = 0;
@@ -11924,11 +11925,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -12063,7 +12064,7 @@
 				CODE_SIGN_IDENTITY = "Mac Developer";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = H7V7XYVQ7D;
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(SRCROOT)",
@@ -12554,11 +12555,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -12729,7 +12730,7 @@
 				CODE_SIGN_IDENTITY = "Mac Developer";
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = H7V7XYVQ7D;
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
 					"$(SRCROOT)",
@@ -13594,12 +13595,12 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = NO;
 				DEBUG_INFORMATION_FORMAT = dwarf;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
@@ -13670,11 +13671,11 @@
 				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
 				CLANG_ENABLE_OBJC_WEAK = YES;
 				CLANG_WARN_INT_CONVERSION = YES;
-				CODE_SIGN_IDENTITY = "-";
-				CODE_SIGN_STYLE = Manual;
+				CODE_SIGN_IDENTITY = "Mac Developer";
+				CODE_SIGN_STYLE = Automatic;
 				COMBINE_HIDPI_IMAGES = YES;
 				COPY_PHASE_STRIP = YES;
-				DEVELOPMENT_TEAM = "";
+				DEVELOPMENT_TEAM = 4688J3MK2P;
 				ENABLE_HARDENED_RUNTIME = NO;
 				FRAMEWORK_SEARCH_PATHS = (
 					"$(inherited)",
diff --git a/sources/PTYSession.m b/sources/PTYSession.m
index e9d8d250a..c898d373a 100644
--- a/sources/PTYSession.m
+++ b/sources/PTYSession.m
@@ -3715,7 +3715,8 @@ - (void)setPreferencesFromAddressBookEntry:(NSDictionary *)aePrefs {
                                                        inBookmark:aDict]];
 
     // transparency
-    [self setTransparency:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:aDict]];
+    // PATCH: (Modified) only window appears semi-transparent, if not opaque, set transparent
+    [self setTransparency:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:aDict] == 0 ? 0 : 1];
     [self setBlend:[iTermProfilePreferences floatForKey:KEY_BLEND inProfile:aDict]];
     [self setTransparencyAffectsOnlyDefaultBackgroundColor:[iTermProfilePreferences floatForKey:KEY_TRANSPARENCY_AFFECTS_ONLY_DEFAULT_BACKGROUND_COLOR inProfile:aDict]];
 
@@ -4063,10 +4064,11 @@ - (float)transparency
 
 - (void)setTransparency:(float)transparency
 {
+    // PATCH: (Modified) ignore 0.9 limit, make terminal fully transparent
     // Limit transparency because fully transparent windows can't be clicked on.
-    if (transparency > 0.9) {
-        transparency = 0.9;
-    }
+    //if (transparency > 0.9) {
+    //    transparency = 0.9;
+    //}
     [_textview setTransparency:transparency];
     [self useTransparencyDidChange];
     [self.view setNeedsDisplay:YES];
diff --git a/sources/PTYTextView.m b/sources/PTYTextView.m
index cee305d44..f751af406 100644
--- a/sources/PTYTextView.m
+++ b/sources/PTYTextView.m
@@ -2587,7 +2587,7 @@ - (void)pasteFromSelectionWithEvent:(NSEvent *)event
 
 - (void)_openTargetWithEvent:(NSEvent *)event inBackground:(BOOL)openInBackground {
     // Command click in place.
-    NSPoint clickPoint = [self clickPoint:event allowRightMarginOverflow:NO];
+    NSPoint clickPoint = [self clickPoint:event allowRightMarginOverflow:YES]; // PATCH: (Modified) fix URL command click?
     int x = clickPoint.x;
     int y = clickPoint.y;
     iTermTextExtractor *extractor = [iTermTextExtractor textExtractorWithDataSource:_dataSource];
diff --git a/sources/PseudoTerminal.m b/sources/PseudoTerminal.m
index e63926036..2768e92ab 100644
--- a/sources/PseudoTerminal.m
+++ b/sources/PseudoTerminal.m
@@ -395,11 +395,11 @@ + (void)registerSessionsInArrangement:(NSDictionary *)arrangement {
 
 + (void)updateDecorationsOfWindow:(NSWindow *)myWindow forType:(iTermWindowType)windowType {
     const BOOL isCompact = (windowType == WINDOW_TYPE_COMPACT);
-    [myWindow setHasShadow:(windowType == WINDOW_TYPE_NORMAL ||
-                            isCompact)];
+    [myWindow setHasShadow:YES]; // PATCH: (Modified) Native macOS window shadow
     // Chrome doesn't change titleVisibility so neither do we.
     // Some truly dreadful hacks are used instead. See PTYWindow.m.
-    myWindow.titlebarAppearsTransparent = isCompact;
+    myWindow.titlebarAppearsTransparent = YES; // PATCH: (Modified) Hides title bar strip
+    //myWindow.titleVisibility = NSWindowTitleHidden; // PATCH: (Added) Hides window title
 }
 
 + (NSInteger)styleMaskForWindowType:(iTermWindowType)windowType
@@ -408,6 +408,7 @@ + (NSInteger)styleMaskForWindowType:(iTermWindowType)windowType
     if (hotkeyWindowType == iTermHotkeyWindowTypeFloatingPanel) {
         mask = NSWindowStyleMaskNonactivatingPanel;
     }
+    //mask = NSFullSizeContentViewWindowMask; // PATCH: (Added) Make content view utilise entire window
     switch (windowType) {
         case WINDOW_TYPE_TOP:
         case WINDOW_TYPE_BOTTOM:
@@ -1771,15 +1772,9 @@ - (PTYSession *)currentSession {
 - (void)setWindowTitle {
     if (self.isShowingTransientTitle) {
         PTYSession *session = self.currentSession;
+        // PATCH: (Modified) just show window dimensions while resizing
         NSString *aTitle;
-        if (self.window.frame.size.width < 250) {
-            aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
-        } else {
-            aTitle = [NSString stringWithFormat:@"%@ \u2014 %d✕%d",
-                      [self undecoratedWindowTitle],
-                      [session columns],
-                      [session rows]];
-        }
+        aTitle = [NSString stringWithFormat:@"%d✕%d", session.columns, session.rows];
         [self setWindowTitle:aTitle];
     } else {
         [self setWindowTitle:[self undecoratedWindowTitle]];
@@ -4844,7 +4839,7 @@ - (void)tabView:(NSTabView*)aTabView
 }
 
 - (void)didDonateTab:(PTYTab *)aTab toWindowController:(PseudoTerminal *)term {
-    if ([term numberOfTabs] == 1) {
+    if (YES) { // PATCH: (Modified) Prevents title bar from showing
         [term fitWindowToTabs];
     } else {
         [term fitTabToWindow:aTab];
@@ -5398,9 +5393,10 @@ - (void)updateTabColors {
         [_contentView.tabBarControl setTabColor:color forTabViewItem:tabViewItem];
         if ([_contentView.tabView selectedTabViewItem] == tabViewItem) {
             NSColor* newTabColor = [_contentView.tabBarControl tabColorForTabViewItem:tabViewItem];
-            if ([_contentView.tabView numberOfTabViewItems] == 1 &&
-                [iTermPreferences boolForKey:kPreferenceKeyHideTabBar] &&
-                newTabColor) {
+            if (YES) { // PATCH: (Modified) always use the tab color
+                // PATCH: (Added) set window title background so it renders properly
+                //NSTextView *titleView = [self.contentView.window standardWindowButton:NSWindowCloseButton].superview.subviews[3];
+                //titleView.backgroundColor = [aSession.colorMap colorForKey:kColorMapBackground];
                 [self setBackgroundColor:newTabColor];
 
                 [_contentView setColor:newTabColor];
@@ -5443,7 +5439,17 @@ - (void)setMojaveBackgroundColor:(nullable NSColor *)backgroundColor NS_AVAILABL
     // But there's a bug that the window title shows a broken vibrancy effect (issue 6964).
     // There's an opportunity for improvement here if there's a tab color and we know the
     // window isn't opaque we could set the titlebar's color, since that works again in 10.14.
-    self.window.backgroundColor = [NSColor clearColor];
+    // PATCH: (Modified) set window background color so our transparent title bar doesn't show behind the window
+    backgroundColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    backgroundColor = [backgroundColor colorWithAlphaComponent:1 - [iTermProfilePreferences floatForKey:KEY_TRANSPARENCY inProfile:self.currentSession.profile]];
+    
+// TODO CLEANUP
+    //self.window.backgroundColor = backgroundColor;
+    //NSColor *bgColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    //bgColor = NSColor color
+    //self.window.backgroundColor = [NSColor clearColor];
+    self.window.backgroundColor = backgroundColor;
+    
 }
 
 - (void)setLegacyBackgroundColor:(nullable NSColor *)backgroundColor {
@@ -5480,6 +5486,10 @@ - (void)setLegacyBackgroundColor:(nullable NSColor *)backgroundColor {
         }
         darkAppearance = (backgroundColor != nil && backgroundColor.perceivedBrightness < 0.5);
     }
+    
+    // PATCH: (Added) set window background color to terminal background color
+    backgroundColor = [self.currentSession.colorMap colorForKey:kColorMapBackground];
+    
     [self.window setBackgroundColor:backgroundColor];
     if (darkAppearance) {
         self.window.appearance = [NSAppearance appearanceNamed:NSAppearanceNameVibrantDark];
diff --git a/sources/iTermAdvancedSettingsModel.h b/sources/iTermAdvancedSettingsModel.h
index b587fc767..b4fb85a65 100644
--- a/sources/iTermAdvancedSettingsModel.h
+++ b/sources/iTermAdvancedSettingsModel.h
@@ -186,6 +186,13 @@ extern NSString *const iTermAdvancedSettingsDidChange;
 + (int)slowPasteBytesPerCall;
 + (double)slowPasteDelayBetweenCalls;
 
+// PATCH: (Added) iTerm2-borderless Features
++ (double)timeBeforeBlinks;
++ (BOOL)setCursorForegroundColor;
++ (NSString *)windowTitleFormat;
++ (int)standardWindowButtonsHorizontalOffset;
++ (int)standardWindowButtonsVerticalOffset;
+
 // The cursor's background goes to the "most different" color from its neighbors if the difference
 // in brightness between the proposed background color and the neighbors' background color is less
 // than this threshold.
diff --git a/sources/iTermAdvancedSettingsModel.m b/sources/iTermAdvancedSettingsModel.m
index a54d81d36..ad81dd36c 100644
--- a/sources/iTermAdvancedSettingsModel.m
+++ b/sources/iTermAdvancedSettingsModel.m
@@ -270,6 +270,14 @@ + (void)enumerateDictionaries:(void (^)(NSDictionary *))block {
 //   `-----'  :      :
 DEFINE_FLOAT(fractionOfCharacterSelectingNextNeighbor, 0.35, SECTION_MOUSE @"Fraction of character’s width on its right side that can be used to select the character to its right.");
 
+// PATCH: (Added) iTerm2-borderless Features
+#pragma mark iTerm2-borderless Preferences
+DEFINE_FLOAT(timeBeforeBlinks, 0.5, @"iTerm2-borderless Features: Duration before cursor starts blinking.");
+DEFINE_BOOL(setCursorForegroundColor, YES, @"iTerm2-borderless Features: Set cursor foreground color.");
+DEFINE_STRING(windowTitleFormat, @"%@", @"iTerm2-borderless Features: Window title format\n“%@” represents the current session name, e.g. 'Terminal - %@'")
+DEFINE_INT(standardWindowButtonsHorizontalOffset, 17, @"iTerm2-borderless Features: Standard window buttons horizontal offset")
+DEFINE_INT(standardWindowButtonsVerticalOffset, 8, @"iTerm2-borderless Features: Standard window buttons vertical offset")
+
 #pragma mark Terminal
 
 #define SECTION_TERMINAL @"Terminal: "
diff --git a/sources/iTermBackgroundDrawingHelper.m b/sources/iTermBackgroundDrawingHelper.m
index d37d3724e..bda2246e3 100644
--- a/sources/iTermBackgroundDrawingHelper.m
+++ b/sources/iTermBackgroundDrawingHelper.m
@@ -15,6 +15,7 @@ @implementation iTermBackgroundDrawingHelper {
 - (void)drawBackgroundImageInView:(NSView *)view
                          viewRect:(NSRect)rect
            blendDefaultBackground:(BOOL)blendDefaultBackground {
+    return;
     const float alpha = [self.delegate backgroundDrawingHelperUseTransparency] ? (1.0 - [self.delegate backgroundDrawingHelperTransparency]) : 1.0;
     NSImage *backgroundImage = [self.delegate backgroundDrawingHelperImage];
     if (backgroundImage) {
diff --git a/sources/iTermCursor.m b/sources/iTermCursor.m
index a38fd5641..c944dd6f2 100644
--- a/sources/iTermCursor.m
+++ b/sources/iTermCursor.m
@@ -209,9 +209,10 @@ - (void)drawWithRect:(NSRect)rect
                                      coord:coord];
         } else {
             // Non-smart
+            // PATCH: (Modified) Set cursor foreground color
             [self.delegate cursorDrawCharacterAt:coord
                                      doubleWidth:doubleWidth
-                                   overrideColor:foregroundColor
+                                   overrideColor:[iTermAdvancedSettingsModel setCursorForegroundColor] == YES ? foregroundColor : nil
                                          context:ctx
                                  backgroundColor:backgroundColor];
         }
diff --git a/sources/iTermTabBarControlView.m b/sources/iTermTabBarControlView.m
index ef1c4af11..ed3266a9a 100644
--- a/sources/iTermTabBarControlView.m
+++ b/sources/iTermTabBarControlView.m
@@ -13,7 +13,7 @@
 #import "NSObject+iTerm.h"
 #import "NSView+iTerm.h"
 
-CGFloat iTermTabBarControlViewDefaultHeight = 24;
+CGFloat iTermTabBarControlViewDefaultHeight = 0; // PATCH: (Modified) hide tab bar
 
 @interface NSView (Private)
 - (NSRect)_opaqueRectForWindowMoveWhenInTitlebar;
diff --git a/sources/iTermTextDrawingHelper.m b/sources/iTermTextDrawingHelper.m
index 0db653842..30fbb55e1 100644
--- a/sources/iTermTextDrawingHelper.m
+++ b/sources/iTermTextDrawingHelper.m
@@ -2566,10 +2566,11 @@ - (NSColor *)backgroundColorForCursor {
 }
 
 - (BOOL)shouldShowCursor {
+    // PATCH: (Modified) Blink delay after moving the cursor
     if (_cursorBlinking &&
         self.isInKeyWindow &&
         _textViewIsActiveSession &&
-        [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > 0.5) {
+        [NSDate timeIntervalSinceReferenceDate] - _lastTimeCursorMoved > [iTermAdvancedSettingsModel timeBeforeBlinks]) {
         // Allow the cursor to blink if it is configured, the window is key, this session is active
         // in the tab, and the cursor has not moved for half a second.
         return _blinkingItemsVisible;
diff --git a/sources/iTermWindowImpl.m b/sources/iTermWindowImpl.m
index 22c7528aa..9eab0b1d4 100644
--- a/sources/iTermWindowImpl.m
+++ b/sources/iTermWindowImpl.m
@@ -47,6 +47,7 @@ - (instancetype)initWithContentRect:(NSRect)contentRect
         DLog(@"Invalidate cached occlusion: %@ %p", NSStringFromSelector(_cmd), self);
         [[iTermWindowOcclusionChangeMonitor sharedInstance] invalidateCachedOcclusion];
     }
+
     return self;
 }
 
@@ -60,6 +61,40 @@ - (void)iterm_dealloc {
 
 }
 
+// PATCH: (Added) Modify standard title bar
+- (void)layoutIfNeeded {
+    NSButton *closeButton = [self.contentView.window standardWindowButton:NSWindowCloseButton];
+    NSButton *miniaturizeButton = [self.contentView.window standardWindowButton:NSWindowMiniaturizeButton];
+    NSButton *fullscreenButton = [self.contentView.window standardWindowButton:NSWindowZoomButton];
+    
+    int horizOff = [iTermAdvancedSettingsModel standardWindowButtonsHorizontalOffset];
+    int vertOff = [iTermAdvancedSettingsModel standardWindowButtonsVerticalOffset];
+    
+    [closeButton setFrameOrigin:NSMakePoint(0 + horizOff, 3)];
+    [miniaturizeButton setFrameOrigin:NSMakePoint(20 + horizOff, 3)];
+    [fullscreenButton setFrameOrigin:NSMakePoint(40 + horizOff, 3)];
+    
+    NSView *lights = closeButton.superview.superview;
+    NSRect newFrame = lights.frame;
+    newFrame.origin.y = self.contentView.frame.size.height - vertOff;
+    lights.frame = newFrame;
+    
+    NSTextView *titleView = closeButton.superview.subviews[3];
+    
+    NSView *decorationView = closeButton.superview.superview.subviews[1];
+    decorationView.layer.opacity = 0.0;
+    
+    titleView.font = [NSFont systemFontOfSize:13];
+    [titleView removeConstraints:titleView.constraints];
+    CGRect frame = titleView.frame;
+    frame.size.width = 200;
+    frame.origin.y = 3;
+    titleView.frame = frame;
+    titleView.drawsBackground = true;
+    
+    [super layoutIfNeeded];
+}
+
 - (BOOL)titleChangedRecently {
     NSTimeInterval now = [NSDate timeIntervalSinceReferenceDate];
     return (now > _timeOfLastWindowTitleChange && now - _timeOfLastWindowTitleChange < iTermWindowTitleChangeMinimumInterval);
